<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Bias Sorter â€“ Simplified & Fixed</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: system-ui, sans-serif;
      background: #111;
      color: #fafafa;
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
    }
    .card {
      background: #1e1e1e;
      border-radius: 12px;
      padding: 2rem;
      width: 90%;
      max-width: 640px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.6);
    }
    h1 {
      margin-top: 0;
      font-size: 1.5rem;
      text-align: center;
    }
    button {
      cursor: pointer;
      border: none;
      border-radius: 8px;
      padding: 0.75rem 1rem;
      margin: 0.25rem;
      font-size: 1rem;
      transition: background 0.2s;
    }
    .depth-btn {
      background: #444;
      color: #fff;
    }
    .depth-btn:hover {
      background: #666;
    }
    .choice-btn {
      width: 100%;
      background: #2d7ef7;
      color: #fff;
      font-weight: 600;
    }
    .choice-btn:hover {
      background: #4790ff;
    }
    .hidden { display: none; }
    #progress {
      margin-top: 1rem;
      font-size: 0.9rem;
      opacity: 0.8;
    }
    ol { padding-left: 1.2rem; }
  </style>
</head>
<body>
  <div class="card">
    <h1>Bias Sorter</h1>

    <div id="setup">
      <p>Select depth (higher = more comparisons):</p>
      <button class="depth-btn" data-depth="1">Quick</button>
      <button class="depth-btn" data-depth="2">Normal</button>
      <button class="depth-btn" data-depth="3">Deep</button>
    </div>

    <div id="compare" class="hidden">
      <p id="progress"></p>
      <button id="left" class="choice-btn"></button>
      <button id="right" class="choice-btn"></button>
    </div>

    <div id="results" class="hidden">
      <h2>Final Ranking</h2>
      <ol id="rankList"></ol>
    </div>
  </div>

  <script>
    // ======== config & helpers =========
    const items = [
      "Pizza Margherita",
      "Goulash",
      "Pad Thai",
      "Falafel",
      "Tiramisu"
    ]; // replace with your actual list

    const BASE_ELO = 1500;
    const K = 24;

    let ratings = {};
    let comparisons = 0;
    let maxComparisons = 0;
    let seenPairs = new Set();
    let depthPref = 1;

    const $ = (id) => document.getElementById(id);

    // ======= Elo math ========
    function expectedScore(ra, rb) {
      return 1 / (1 + Math.pow(10, (rb - ra) / 400));
    }

    function updateElo(pair, winnerIdx) {
      const [a, b] = pair;
      const ra = ratings[a];
      const rb = ratings[b];
      const ea = expectedScore(ra, rb);
      const eb = 1 - ea;
      ratings[a] = ra + K * ((winnerIdx === 0) - ea);
      ratings[b] = rb + K * ((winnerIdx === 1) - eb);
    }

    // ====== pair selection ========
    function makeKey(x, y) {
      return x < y ? `${x}|${y}` : `${y}|${x}`;
    }

    function getNextPair() {
      // sort items by rating so we test closest-ranked neighbours first
      const sorted = [...items].sort((x, y) => ratings[y] - ratings[x]);
      for (let i = 0; i < sorted.length - 1; i++) {
        const key = makeKey(sorted[i], sorted[i + 1]);
        if (!seenPairs.has(key)) {
          seenPairs.add(key);
          return [sorted[i], sorted[i + 1]];
        }
      }
      return null; // everyone compared at least once
    }

    // ======= flow control =========
    function startSorter(depth) {
      depthPref = depth;
      // init state
      comparisons = 0;
      maxComparisons = depthPref * Math.ceil(items.length * Math.log2(items.length));
      ratings = Object.fromEntries(items.map((i) => [i, BASE_ELO]));
      seenPairs = new Set();

      // UI
      $("setup").classList.add("hidden");
      $("compare").classList.remove("hidden");
      $("results").classList.add("hidden");

      nextComparison();
    }

    function nextComparison() {
      if (comparisons >= maxComparisons) {
        finish();
        return;
      }

      const pair = getNextPair();
      if (!pair) {
        finish();
        return;
      }

      // show pair to user
      $("left").textContent = pair[0];
      $("right").textContent = pair[1];
      $("left").onclick = () => chooseWinner(pair, 0);
      $("right").onclick = () => chooseWinner(pair, 1);

      $("progress").textContent = `Comparison ${comparisons + 1} of ${maxComparisons}`;
    }

    function chooseWinner(pair, winnerIdx) {
      updateElo(pair, winnerIdx);
      comparisons++;
      nextComparison();
    }

    function finish() {
      $("compare").classList.add("hidden");
      $("results").classList.remove("hidden");

      const sortedFinal = [...items].sort((a, b) => ratings[b] - ratings[a]);
      const list = $("rankList");
      list.innerHTML = "";
      sortedFinal.forEach((item) => {
        const li = document.createElement("li");
        li.textContent = `${item}  (Elo: ${Math.round(ratings[item])})`;
        list.appendChild(li);
      });
    }

    // ====== depth buttons events =======
    document.querySelectorAll(".depth-btn").forEach((btn) => {
      btn.addEventListener("click", () => {
        const depth = parseInt(btn.dataset.depth, 10);
        startSorter(depth);
      });
    });
  </script>
</body>
</html>
